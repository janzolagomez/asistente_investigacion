# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QYd_rf88DG1OvGPwfQgUoLcK61-ppzpi
"""

import streamlit as st
import pandas as pd
from io import BytesIO
from docx import Document

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Asistente para Matriz de Investigaci√≥n", layout="wide")

# Inicializaci√≥n del estado de sesi√≥n
if 'step' not in st.session_state:
    st.session_state.step = 0
if 'matrix_data' not in st.session_state:
    st.session_state.matrix_data = {
        'tipo_investigacion': '',
        'tema': '',
        'pregunta': '',
        'objetivo_general': '',
        'objetivos_especificos': ['', '', ''],
        'justificacion': '',
        'marco_teorico': [],
        'metodologia': {
            'poblacion': '',
            'muestra': '',
            'tecnicas': ''
        },
        'variables': {'independiente': '', 'dependiente': ''},
        'hipotesis': {'nula': '', 'alternativa': ''}
    }

# Funci√≥n para generar el documento Word
def generate_word_document(data):
    doc = Document()
    doc.add_heading('Matriz de Consistencia de Investigaci√≥n', 0)
    doc.add_paragraph(f"Tipo de Investigaci√≥n: {data['tipo_investigacion'] or 'No definido'}")
    doc.add_heading('1. Tema', level=1)
    doc.add_paragraph(data['tema'] or 'No definido')
    doc.add_heading('2. Pregunta de Investigaci√≥n', level=1)
    doc.add_paragraph(data['pregunta'] or 'No definido')
    doc.add_heading('3. Objetivos', level=1)
    doc.add_paragraph(f"General: {data['objetivo_general'] or 'No definido'}")
    doc.add_paragraph("Espec√≠ficos:")
    for oe in data['objetivos_especificos']:
        if oe:
            doc.add_paragraph(f"- {oe}")

    if data['tipo_investigacion'] == 'Cuantitativa':
        doc.add_heading('4. Variables', level=1)
        doc.add_paragraph(f"Independiente: {data['variables']['independiente'] or 'No definido'}")
        doc.add_paragraph(f"Dependiente: {data['variables']['dependiente'] or 'No definido'}")
        doc.add_heading('5. Hip√≥tesis', level=1)
        doc.add_paragraph(f"Nula (H‚ÇÄ): {data['hipotesis']['nula'] or 'No definido'}")
        doc.add_paragraph(f"Alternativa (H‚ÇÅ): {data['hipotesis']['alternativa'] or 'No definido'}")
        doc.add_heading('6. Justificaci√≥n', level=1)
    else:
        doc.add_heading('4. Justificaci√≥n', level=1)

    doc.add_paragraph(data['justificacion'] or 'No definido')

    doc.add_heading('Marco Te√≥rico', level=1)
    if data['marco_teorico']:
        for entry in data['marco_teorico']:
            doc.add_paragraph(f"- {entry['concepto']}: {entry['autores']}")
    else:
        doc.add_paragraph("No definido")

    doc.add_heading('Metodolog√≠a', level=1)
    met = data['metodologia']
    doc.add_paragraph(f"Poblaci√≥n: {met['poblacion'] or 'No definido'}")
    doc.add_paragraph(f"Muestra: {met['muestra'] or 'No definido'}")
    doc.add_paragraph(f"T√©cnicas: {met['tecnicas'] or 'No definido'}")

    bio = BytesIO()
    doc.save(bio)
    bio.seek(0)
    return bio

# Chatbot: Lista de pasos y preguntas
steps = [
    {
        'question': "¬°Hola! Vamos a crear tu matriz de investigaci√≥n. ¬øQu√© tipo de investigaci√≥n realizar√°s?",
        'input_type': 'radio',
        'options': ['Cualitativa', 'Cuantitativa'],
        'key': 'tipo_investigacion'
    },
    {
        'question': "Perfecto. Ahora, ¬øcu√°l es el tema de tu investigaci√≥n? Describe brevemente el fen√≥meno y el contexto.",
        'input_type': 'text_area',
        'key': 'tema'
    },
    {
        'question': "¬øCu√°l es tu pregunta de investigaci√≥n? Aseg√∫rate de que sea clara y est√© alineada con tu tema.",
        'input_type': 'text_area',
        'key': 'pregunta'
    },
    {
        'question': "Ahora escribe tu objetivo general. ¬øQu√© quieres lograr con tu investigaci√≥n?",
        'input_type': 'text_area',
        'key': 'objetivo_general'
    },
    {
        'question': "Escribe hasta 3 objetivos espec√≠ficos. Estos deben detallar c√≥mo alcanzar√°s tu objetivo general. Ingresa uno por l√≠nea.",
        'input_type': 'text_area',
        'key': 'objetivos_especificos',
        'special': 'list'
    },
]

# Pasos adicionales para cuantitativa
quantitative_steps = [
    {
        'question': "Define tu variable independiente (la causa).",
        'input_type': 'text_input',
        'key': 'variables.independiente'
    },
    {
        'question': "Define tu variable dependiente (el efecto).",
        'input_type': 'text_input',
        'key': 'variables.dependiente'
    },
    {
        'question': "Escribe tu hip√≥tesis nula (H‚ÇÄ).",
        'input_type': 'text_area',
        'key': 'hipotesis.nula'
    },
    {
        'question': "Escribe tu hip√≥tesis alternativa (H‚ÇÅ).",
        'input_type': 'text_area',
        'key': 'hipotesis.alternativa'
    },
]

# Pasos finales (comunes)
final_steps = [
    {
        'question': "¬øPor qu√© es importante tu investigaci√≥n? Escribe la justificaci√≥n.",
        'input_type': 'text_area',
        'key': 'justificacion'
    },
    {
        'question': "Para el marco te√≥rico, ingresa un concepto o variable clave y sus autores (formato: Concepto - Autores). Ingresa uno por l√≠nea.",
        'input_type': 'text_area',
        'key': 'marco_teorico',
        'special': 'marco_teorico'
    },
    {
        'question': "Describe la poblaci√≥n de tu estudio (¬øqui√©nes son los participantes?).",
        'input_type': 'text_area',
        'key': 'metodologia.poblacion'
    },
    {
        'question': "Describe la muestra (¬øc√≥mo seleccionar√°s a los participantes?).",
        'input_type': 'text_area',
        'key': 'metodologia.muestra'
    },
    {
        'question': "¬øQu√© t√©cnicas usar√°s para recolectar datos? (Ej. entrevistas, encuestas, observaci√≥n).",
        'input_type': 'text_area',
        'key': 'metodologia.tecnicas'
    },
]

# Ajustar pasos seg√∫n tipo de investigaci√≥n
tipo_investigacion = st.session_state.matrix_data.get('tipo_investigacion', '')
if tipo_investigacion == 'Cuantitativa':
    all_steps = steps + quantitative_steps + final_steps
else:
    all_steps = steps + final_steps

# Funci√≥n principal
def main():
    st.title("Asistente Chatbot para Matriz de Investigaci√≥n")
    st.write("Soy tu asistente para crear una matriz de consistencia. Responde cada pregunta y al final podr√°s descargar tu matriz.")

    # Mostrar progreso
    st.sidebar.header("Progreso")
    for i, step in enumerate(all_steps):
        icon = "‚¨ú" if i > st.session_state.step else "‚úÖ" if i < st.session_state.step else "üü®"
        st.sidebar.markdown(f"{icon} Paso {i+1}")

    # Mostrar paso actual
    if st.session_state.step < len(all_steps):
        current_step = all_steps[st.session_state.step]
        st.markdown(f"**Chatbot:** {current_step['question']}")

        # Manejar diferentes tipos de entrada
        if current_step['input_type'] == 'radio':
            response = st.radio("Selecciona una opci√≥n:", current_step['options'], key=f"input_{st.session_state.step}")
            st.session_state.matrix_data[current_step['key']] = response
        elif current_step['input_type'] == 'text_input':
            response = st.text_input("Tu respuesta:", key=f"input_{st.session_state.step}")
            keys = current_step['key'].split('.')
            if len(keys) == 2:
                st.session_state.matrix_data[keys[0]][keys[1]] = response
            else:
                st.session_state.matrix_data[current_step['key']] = response
        elif current_step['input_type'] == 'text_area':
            response = st.text_area("Tu respuesta:", key=f"input_{st.session_state.step}", height=100)
            if current_step.get('special') == 'list':
                # Convertir entrada en lista
                lines = [line.strip() for line in response.split('\n') if line.strip()]
                st.session_state.matrix_data[current_step['key']] = lines[:3]  # Limitar a 3
            elif current_step.get('special') == 'marco_teorico':
                # Convertir entrada en lista de diccionarios
                lines = [line.strip() for line in response.split('\n') if line.strip()]
                marco_teorico = []
                for line in lines:
                    parts = line.split(' - ')
                    if len(parts) >= 2:  # Manejar casos con m√∫ltiples guiones
                        marco_teorico.append({'concepto': parts[0], 'autores': ' - '.join(parts[1:])})
                st.session_state.matrix_data[current_step['key']] = marco_teorico
            else:
                keys = current_step['key'].split('.')
                if len(keys) == 2:
                    st.session_state.matrix_data[keys[0]][keys[1]] = response
                else:
                    st.session_state.matrix_data[current_step['key']] = response

        # Botones de navegaci√≥n
        col1, col2 = st.columns(2)
        with col1:
            if st.session_state.step > 0:
                if st.button("‚¨ÖÔ∏è Regresar"):
                    st.session_state.step -= 1
                    st.rerun()
        with col2:
            if st.button("Avanzar ‚û°Ô∏è"):
                if response or current_step['input_type'] == 'radio':
                    st.session_state.step += 1
                    st.rerun()
                else:
                    st.warning("Por favor, completa el campo antes de avanzar.")

    # Paso final: Revisi√≥n y descarga
    else:
        st.markdown("**Chatbot:** ¬°Hemos terminado! Aqu√≠ est√° tu matriz. Revisa los datos y descarga el documento.")
        data = st.session_state.matrix_data
        st.subheader("Resumen de tu Matriz")
        st.write(f"**Tipo de Investigaci√≥n:** {data['tipo_investigacion'] or 'No definido'}")
        st.write(f"**Tema:** {data['tema'] or 'No definido'}")
        st.write(f"**Pregunta:** {data['pregunta'] or 'No definido'}")
        st.write(f"**Objetivo General:** {data['objetivo_general'] or 'No definido'}")
        st.write("**Objetivos Espec√≠ficos:**")
        for oe in data['objetivos_especificos']:
            if oe:
                st.write(f"- {oe}")
        if data['tipo_investigacion'] == 'Cuantitativa':
            st.write(f"**Variable Independiente:** {data['variables']['independiente'] or 'No definido'}")
            st.write(f"**Variable Dependiente:** {data['variables']['dependiente'] or 'No definido'}")
            st.write(f"**Hip√≥tesis Nula (H‚ÇÄ):** {data['hipotesis']['nula'] or 'No definido'}")
            st.write(f"**Hip√≥tesis Alternativa (H‚ÇÅ):** {data['hipotesis']['alternativa'] or 'No definido'}")
        st.write(f"**Justificaci√≥n:** {data['justificacion'] or 'No definido'}")
        st.write("**Marco Te√≥rico:**")
        for entry in data['marco_teorico']:
            st.write(f"- {entry['concepto']}: {entry['autores']}")
        st.write("**Metodolog√≠a:**")
        st.write(f"- Poblaci√≥n: {data['metodologia']['poblacion'] or 'No definido'}")
        st.write(f"- Muestra: {data['metodologia']['muestra'] or 'No definido'}")
        st.write(f"- T√©cnicas: {data['metodologia']['tecnicas'] or 'No definido'}")

        # Bot√≥n de descarga
        try:
            docx_file = generate_word_document(data)
            st.download_button(
                label="Descargar documento",
                data=docx_file,
                file_name="Matriz_Investigacion.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
        except Exception as e:
            st.error(f"Error al generar el documento: {str(e)}")

        # Bot√≥n para reiniciar
        if st.button("üîÑ Empezar de nuevo"):
            st.session_state.step = 0
            st.session_state.matrix_data = {
                'tipo_investigacion': '',
                'tema': '',
                'pregunta': '',
                'objetivo_general': '',
                'objetivos_especificos': ['', '', ''],
                'justificacion': '',
                'marco_teorico': [],
                'metodologia': {
                    'poblacion': '',
                    'muestra': '',
                    'tecnicas': ''
                },
                'variables': {'independiente': '', 'dependiente': ''},
                'hipotesis': {'nula': '', 'alternativa': ''}
            }
            st.rerun()

if __name__ == "__main__":
    main()